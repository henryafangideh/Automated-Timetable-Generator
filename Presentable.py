# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interface.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import math
from random import randrange, randint 
from random import *
import csv

counter = 1
i = 0
    
    
# The Venue Class
class Venue:
    count_venues=[]
    def __init__(self, name, capacity):
        self.name = str(name)
        self.capacity = int(capacity)
        Venue.count_venues.append(self.name)
        
    def __del__(self):
        Venue.count_venues.remove(self)
    
    @staticmethod
    def bit(self):
        a = len(Venue.count_venues)
        global bitstring_venue, bitstring_venue2 
        bitstring_venue = ""
        bitstring_venue2 = ""
        for i in range (math.ceil(math.log(a, 2))):
            bitstring_venue += str(randrange(0,2))
            bitstring_venue2 += str(randrange(0,2))
        #print(bitstring_venue, bitstring_venue2)
        return bitstring_venue, bitstring_venue2

#Available venues in faculty of engineering
elf = Venue("ELF", 500)
tetfund = Venue("TETfund", 250)
necb1 = Venue("NECB1", 200)
necb2 = Venue("NECB2", 200)
necb3 = Venue("NECB3", 200)
gd1 = Venue("GD1", 100)
gd2 = Venue("GD2", 100)
gd3 = Venue("GD3", 100)
gd4 = Venue("GD4", 100)     
neb1 = Venue("NEB1", 200)
neb2 = Venue("NEB2", 200)
neb3 = Venue("NEB3", 200)
neb4 = Venue("NEB4", 200)
neb5 = Venue("NEB5", 200)     
neb6= Venue("NEB6", 200)  
fl3 = Venue("FL 3", 100)
fl4 = Venue("FL 4", 100)
ptdfhall = Venue("PTDFhall", 250)
ptdf1 = Venue("PTDF1", 100)
ptdf2 = Venue("PTDF2", 100)

# Visual Interface
class Ui_MainWindow(object):
    my_dict1 = {}
    my_dict2 = {}
    my_dict3 = {}
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(705, 588)
        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        MainWindow.setAnimated(True)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(240, 460, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(90, 50, 521, 21))
        self.line.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line.setLineWidth(24)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setObjectName("line")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(230, 0, 241, 51))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Black")
        font.setPointSize(28)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")

        #The subjects entered
        self.subject1 = QtWidgets.QLineEdit(self.centralwidget)
        self.subject1.setGeometry(QtCore.QRect(100, 160, 113, 20))
        self.subject1.setObjectName("subject1")
        self.subject2 = QtWidgets.QLineEdit(self.centralwidget)
        self.subject2.setGeometry(QtCore.QRect(100, 190, 113, 20))
        self.subject2.setObjectName("subject2")
        self.subject3 = QtWidgets.QLineEdit(self.centralwidget)
        self.subject3.setGeometry(QtCore.QRect(100, 220, 113, 20))
        self.subject3.setObjectName("subject3")
        self.subject4 = QtWidgets.QLineEdit(self.centralwidget)
        self.subject4.setGeometry(QtCore.QRect(100, 250, 113, 20))
        self.subject4.setObjectName("subject4")
        self.subject5 = QtWidgets.QLineEdit(self.centralwidget)
        self.subject5.setGeometry(QtCore.QRect(100, 280, 113, 20))
        self.subject5.setObjectName("subject5")
        self.subject6 = QtWidgets.QLineEdit(self.centralwidget)
        self.subject6.setGeometry(QtCore.QRect(100, 310, 113, 20))
        self.subject6.setObjectName("subject6") 
        self.subject7 = QtWidgets.QLineEdit(self.centralwidget)
        self.subject7.setGeometry(QtCore.QRect(100, 340, 113, 20))
        self.subject7.setObjectName("subject7")       
        self.subject8 = QtWidgets.QLineEdit(self.centralwidget)
        self.subject8.setGeometry(QtCore.QRect(100, 370, 113, 20))
        self.subject8.setObjectName("subject8")
        self.subject9 = QtWidgets.QLineEdit(self.centralwidget)
        self.subject9.setGeometry(QtCore.QRect(100, 400, 113, 20))
        self.subject9.setObjectName("subject9")
        self.subject10 = QtWidgets.QLineEdit(self.centralwidget)
        self.subject10.setGeometry(QtCore.QRect(100, 430, 113, 20))
        self.subject10.setObjectName("subject10")
        
        #The expected number of students
        self.number1 = QtWidgets.QLineEdit(self.centralwidget)
        self.number1.setGeometry(QtCore.QRect(290, 160, 111, 20))
        self.number1.setObjectName("number1")
        self.number2 = QtWidgets.QLineEdit(self.centralwidget)
        self.number2.setGeometry(QtCore.QRect(290, 190, 113, 20))
        self.number2.setObjectName("number2")
        self.number3 = QtWidgets.QLineEdit(self.centralwidget)
        self.number3.setGeometry(QtCore.QRect(290, 220, 113, 20))
        self.number3.setObjectName("number3")
        self.number4 = QtWidgets.QLineEdit(self.centralwidget)
        self.number4.setGeometry(QtCore.QRect(290, 250, 113, 20))
        self.number4.setObjectName("number4")
        self.number5 = QtWidgets.QLineEdit(self.centralwidget)
        self.number5.setGeometry(QtCore.QRect(290, 280, 113, 20))
        self.number5.setObjectName("number5")
        self.number6 = QtWidgets.QLineEdit(self.centralwidget)
        self.number6.setGeometry(QtCore.QRect(290, 310, 113, 20))
        self.number6.setObjectName("number6")
        self.number7 = QtWidgets.QLineEdit(self.centralwidget)
        self.number7.setGeometry(QtCore.QRect(290, 340, 113, 20))
        self.number7.setObjectName("number7")
        self.number8 = QtWidgets.QLineEdit(self.centralwidget)
        self.number8.setGeometry(QtCore.QRect(290, 370, 113, 20))
        self.number8.setObjectName("number8")
        self.number9 = QtWidgets.QLineEdit(self.centralwidget)
        self.number9.setGeometry(QtCore.QRect(290, 400, 113, 20))
        self.number9.setObjectName("number9")
        self.number10 = QtWidgets.QLineEdit(self.centralwidget)
        self.number10.setGeometry(QtCore.QRect(290, 430, 113, 20))
        self.number10.setObjectName("number10")

        #The alloted credit hours
        self.hours1 = QtWidgets.QLineEdit(self.centralwidget)
        self.hours1.setGeometry(QtCore.QRect(480, 160, 111, 20))
        self.hours1.setObjectName("hours1")
        self.hours2 = QtWidgets.QLineEdit(self.centralwidget)
        self.hours2.setGeometry(QtCore.QRect(480, 190, 113, 20))
        self.hours2.setObjectName("hours2")
        self.hours3 = QtWidgets.QLineEdit(self.centralwidget)
        self.hours3.setGeometry(QtCore.QRect(480, 220, 113, 20))
        self.hours3.setObjectName("hours3")
        self.hours4 = QtWidgets.QLineEdit(self.centralwidget)
        self.hours4.setGeometry(QtCore.QRect(480, 250, 113, 20))
        self.hours4.setObjectName("hours4")
        self.hours5 = QtWidgets.QLineEdit(self.centralwidget)
        self.hours5.setGeometry(QtCore.QRect(480, 280, 113, 20))
        self.hours5.setObjectName("hours5")
        self.hours6 = QtWidgets.QLineEdit(self.centralwidget)
        self.hours6.setGeometry(QtCore.QRect(480, 310, 113, 20))
        self.hours6.setObjectName("hours6")
        self.hours7 = QtWidgets.QLineEdit(self.centralwidget)
        self.hours7.setGeometry(QtCore.QRect(480, 340, 113, 20))
        self.hours7.setObjectName("hours7")
        self.hours8 = QtWidgets.QLineEdit(self.centralwidget)
        self.hours8.setGeometry(QtCore.QRect(480, 370, 113, 20))
        self.hours8.setObjectName("hours8")
        self.hours9 = QtWidgets.QLineEdit(self.centralwidget)
        self.hours9.setGeometry(QtCore.QRect(480, 400, 113, 20))
        self.hours9.setObjectName("hours9")
        self.hours10 = QtWidgets.QLineEdit(self.centralwidget)
        self.hours10.setGeometry(QtCore.QRect(480, 430, 113, 20))
        self.hours10.setObjectName("hours10")
        
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(110, 130, 111, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(270, 130, 151, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(490, 130, 111, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setEnabled(True)
        self.label_5.setGeometry(QtCore.QRect(250, 90, 197, 31))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(240, 232, 229))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 232, 229))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 232, 229))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        self.label_5.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setFocusPolicy(QtCore.Qt.NoFocus)
        self.label_5.setAcceptDrops(False)
        self.label_5.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_5.setAutoFillBackground(True)
        self.label_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.label_5.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label_5.setObjectName("label_5")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(360, 460, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 705, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # To add subjects from all forms into a dictionary
        self.pushButton_2.clicked.connect(self.add_subject)
        
        # To create initial chromosome for subjects
        self.pushButton_2.clicked.connect(self.bit1)
        
        # To create initial chromosome for number of students
        self.pushButton_2.clicked.connect(self.bit2)
        
        # To create initial chromosome for credit hours
        #self.pushButton_2.clicked.connect(self.bit3)

        # To produce a new blank form for each class of data
        self.pushButton_2.clicked.connect(self.next_class)

        # To generate the parent genome pairs
        #self.pushButton.clicked.connect(self.chromosome)
        
        # To carry out mutation
        #self.pushButton.clicked.connect(self.mutation)
        
        # To carry out crossover
        #self.pushButton.clicked.connect(self.multipoint_crossover)
        
        # To read the values from a genome
        #self.pushButton.clicked.connect(self.read)
        
        # First genome fitness score for venue size
        #self.pushButton.clicked.connect(self.fitness)
        
        # Second genome fitness score for venue size
        self.pushButton.clicked.connect(self.runtime)
        
        
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Generate"))
        self.label.setText(_translate("MainWindow", "Genetic"))
        self.label_2.setText(_translate("MainWindow", "Course"))
        self.label_3.setText(_translate("MainWindow", "Student No"))
        self.label_4.setText(_translate("MainWindow", "Hours"))
        self.label_5.setText(_translate("MainWindow", "Computer 100L"))
        self.pushButton_2.setText(_translate("MainWindow", "Next Class"))

    
    # The Next Class Button
    def next_class(self):
        ui.setupUi(MainWindow)
        classes = ['Electrical 100L', 'Petroleum 100L', 'Chemical 100L', 'Mechanical 100L', 'Agric 100L', 'Food 100L', 'Civil 100L',
                   "Computer 200L",'Electrical 200L', 'Petroleum 200L', 'Chemical 200L', 'Mechanical 200L', 'Agric 200L', 'Food 200L', 'Civil 200L',
                   "Computer 300L",'Electrical 300L', 'Petroleum 300L', 'Chemical 300L', 'Mechanical 300L', 'Agric 300L', 'Food 300L', 'Civil 300L',
                   "Computer 400L",'Electrical 400L', 'Petroleum 400L', 'Chemical 400L', 'Mechanical 400L', 'Agric 400L', 'Food 400L', 'Civil 400L',
                   "Computer 500L",'Electrical 500L', 'Petroleum 500L', 'Chemical 500L', 'Mechanical 500L', 'Agric 500L', 'Food 500L', 'Civil 500L',
                   ]
        global i
        self.label_5.setText(classes[i])
        i += 1
    
        MainWindow.show()
        
    
    
     
    # To store subject inputs
    def add_subject(self): 
         global counter
         key = counter
         
         self.my_dict1[key] = self.subject1.text()
         self.my_dict2[key] = self.number1.text()
         self.my_dict3[key] = self.hours1.text()
         
         counter += 1
         key = counter
         self.my_dict1[key] = self.subject2.text()
         self.my_dict2[key] = self.number2.text()
         self.my_dict3[key] = self.hours2.text()
         
         counter += 1
         key = counter
         self.my_dict1[key] = self.subject3.text()
         self.my_dict2[key] = self.number3.text()
         self.my_dict3[key] = self.hours3.text()
         
         counter += 1
         key = counter
         self.my_dict1[key] = self.subject4.text()
         self.my_dict2[key] = self.number4.text()
         self.my_dict3[key] = self.hours4.text()
         
         counter += 1
         key = counter
         self.my_dict1[key] = self.subject5.text()
         self.my_dict2[key] = self.number5.text()
         self.my_dict3[key] = self.hours5.text()
         
         counter += 1
         key = counter
         self.my_dict1[key] = self.subject6.text()  
         self.my_dict2[key] = self.number6.text()
         self.my_dict3[key] = self.hours6.text()
         
         counter += 1
         key = counter
         self.my_dict1[key] = self.subject7.text()
         self.my_dict2[key] = self.number7.text()
         self.my_dict3[key] = self.hours7.text()
         
         counter += 1
         key = counter
         self.my_dict1[key] = self.subject8.text()
         self.my_dict2[key] = self.number8.text()
         self.my_dict3[key] = self.hours8.text()
         
         counter += 1
         key = counter
         self.my_dict1[key] = self.subject9.text()
         self.my_dict2[key] = self.number9.text()
         self.my_dict3[key] = self.hours9.text()
         
         counter += 1
         key = counter
         self.my_dict1[key] = self.subject10.text()
         self.my_dict2[key] = self.number10.text()
         self.my_dict3[key] = self.hours10.text()
         counter += 1
         
         # Subject list
         input_subjects = []
         dict1_value_list = list(self.my_dict1.values())
         for item in dict1_value_list:
            if item != "":
                input_subjects.append(item)
         
         # Key1 list
         key_list = []
         n = 1
         #dict1_key_list = list(self.my_dict1.keys())
         for item in range(len(input_subjects)):
             key_list.append(n)
             n = n + 1
            
         binary_list1 = []
         #binary_dict1 = ''
         for number in key_list:
             binary_dict1 = bin(number) # Convert to binary
             binary_dict1 = binary_dict1[2:]  # Remove 0b prefix
             binary_dict1 = str(binary_dict1) # Convert to string
             binary_dict1 = binary_dict1.zfill(9) # Pad to 9 digits
             binary_list1.append(binary_dict1)   # Add to list

         # Value2 list - Number of Students
         student_number = []
         dict2_value_list = list(self.my_dict2.values())
         for item in dict2_value_list:
            if item != "":
                student_number.append(item)
                 
         # Key2 list
         key_list2 = []
         m = 1
         #dict2_key_list = list(self.my_dict2.keys())
         for item in student_number:
            key_list2.append(m)
            m = m + 1
         

         binary_list2 = []
         #binary_dict2 = ''
         for number2 in key_list2:
             binary_dict2 = bin(number2)
             binary_dict2 = binary_dict2[2:]
             binary_dict2 = str(binary_dict2)
             binary_dict2 = binary_dict1.zfill(9)
             binary_list2.append(binary_dict2)   

         # Value3 list - Credit Hours
         credit_hour = []
         dict3_value_list = list(self.my_dict3.values())
         for item in dict3_value_list:
            if item != "":
                credit_hour.append(item)
        
        
         # The adding of subjects according to credit hours
         for i in range (len(credit_hour)):
             #for _ in (credit_hour):
                 if int(credit_hour[i]) <= 2:
                    pass
                 else:
                    input_subjects.append(input_subjects[i])                
            
            
         # Key3 list
         key_list3 = []
         r = 1
         #dict3_key_list = list(self.my_dict3.keys())
         for item in credit_hour:
            key_list2.append(r)
            r = r + 1
        
            
         binary_list3 = []
         #binary_dict3 = ''
         for number3 in key_list3:
             binary_dict3 = bin(number3)
             binary_dict3 = binary_dict3[2:]
             binary_dict3 = str(binary_dict3)
             binary_dict3 = binary_dict3.zfill(9)
             binary_list3.append(binary_dict3)   
          
         return len(key_list), input_subjects, binary_list1
    
    
    
    def subject_classifier(self):
        level100=0
        level200=0
        level300=0
        level400=0
        level500=0
        
        # 100 Level
        for i in range(1,81):
            if self.my_dict3[i] != '':
                if int(self.my_dict3[i]) > 2:
                    level100 = level100 + 2
                if int(self.my_dict3[i]) <= 2:
                    level100 = level100 + 1                
        
        # 200 level
        for i in range(81,161):
            if self.my_dict3[i] != '':
                if int(self.my_dict3[i]) > 2:
                    level200 = level200 + 2
                if int(self.my_dict3[i]) <= 2:
                    level200 = level200 + 1                
                
        # 300 level
        for i in range(161,241):
            if self.my_dict3[i] != '':
                if int(self.my_dict3[i]) > 2:
                    level300 = level300 + 2
                if int(self.my_dict3[i]) <= 2:
                    level300 = level300 + 1                

        # 400 level
        for i in range(241,321):
            if self.my_dict3[i] != '':
                if int(self.my_dict3[i]) > 2:
                    level400 = level400 + 2
                if int(self.my_dict3[i]) <= 2:
                    level400 = level400 + 1                                
        
        # 500 level
        for i in range(321,401):
            if self.my_dict3[i] != '':
                if int(self.my_dict3[i]) > 2:
                    level500 = level500 + 2
                if int(self.my_dict3[i]) <= 2:
                    level500 = level500 + 1
                
        return level100, level200, level300, level400, level500
    
    
    
    # Bitstring for subjects
    def bit1(self):
        #global my_dict1
        length1 = len(self.my_dict1)
        bitstring_subject = ""
        bitstring_subject2 = ""
        for i in range (math.ceil(math.log(length1) / math.log(2))):
            bitstring_subject += str(randrange(0,2))
            bitstring_subject2 += str(randrange(0,2))
       # print (bitstring_subject)
        return bitstring_subject, bitstring_subject2


    # Bitstring for number of students offering subject
    def bit2(self):
        global my_dict2
        length2 = len(self.my_dict2)
        bitstring_number = ""
        bitstring_number2 = ""
        for i in range (math.ceil(math.log(length2) / math.log(2))):
            bitstring_number += str(randrange(0,2))
            bitstring_number2 += str(randrange(0,2))
        return bitstring_number, bitstring_number2
        
    # Bitstring for credit hours
    def bit3(self):
        global my_dict3
        length3 = len(self.my_dict3)
        bitstring_hours = ""
        bitstring_hours2 = ""
        for i in range (math.ceil(math.log(length3) / math.log(2))):
            bitstring_hours += str(randrange(0,2))
            bitstring_hours2 += str(randrange(0,2))
        return bitstring_hours, bitstring_hours2 
    
    
    # Creates genome based on the number of required chromosome bits
    def chromosome(self):
        a,b = Venue.bit(self)
        c,d = ui.bit1()
        e = len(a) + len(c)
        genome = ""
        genome2 = ""
        
        count = 0
        for value in self.my_dict1.values():
            if not value:  
                count += 1
                
        for i in range (e * count * 10):
            genome += str(randrange(0,2))
            genome2 += str(randrange(0,2))
        return genome, genome2
    
    
    # Mutation function
    def mutation(self, input1, input2):
        mutation_rate = 0.05
        
        # Iterate over each gene in the individual
        # x, y = ui.chromosome() 
        x_list = list(input1)
        y_list = list(input2)
        for i in range(len(input1)):
            
            # Check if mutation should occur for this gene
            import random
            if random.uniform (0 , 1) < mutation_rate:
                if x_list[i] == 0:
                    x_list[i] = 1
                if x_list[i] == 1:
                    x_list[i] = 0
                # Flip the value of the gene (0 to 1 or 1 to 0)
                #x_list[i] = 1 - x_list[i]
                
            # For second genome string
            if random.random() < mutation_rate:
                if y_list[i] == 0:
                    y_list[i] = 1
                if y_list[i] == 1:
                    y_list[i] = 0
                
                # Flip the value of the gene (0 to 1 or 1 to 0)
               # y_list[i] = 1 - y_list[i]
        x, y = x_list, y_list
        return x, y

        
    def multipoint_crossover(self, gene1, gene2):
        #gene1, gene2 = Ui_MainWindow.mutation(ui)
        # Randomly select crossover points
        gene1 = list(gene1)
        import random
        num_crossover_points =  math.ceil(len(gene1)/2)
        print (len(gene1))
        crossover_points = sorted(random.sample(range(1, len(gene1)), num_crossover_points))
        global child1, child2
        child1, child2 = [], []
        parent_switch = True

        for i in range(len(gene1)):
            if parent_switch:
                child1.append(gene1[i])
                child2.append(gene2[i])
            else:
                child1.append(gene2[i])
                child2.append(gene1[i])

            if i in crossover_points:
                parent_switch = not parent_switch
        
        # To change the long list of genomes into a string
        child1 = ''.join(str(num) for num in child1)
        child2 = ''.join(str(num) for num in child2)
        
        # Store the children as attributes of the class instance
        return child1, child2
    
    
    # Genome reader
    def read(self):
        # a is genome and b is genome 2
        a , b = ui.chromosome()
        import random
        # Venues movement
        venue_list = Venue.count_venues
        # Venues binary list
        venue_binary=[]
        for venue in venue_list:
            venue_index = venue_list.index(venue)
            venue_index = "{0:b}".format(venue_index)
            venue_binary.append(venue_index)
        # Pad binary numbers
        pad_venue = []
        for binary in venue_binary:
            binary_str = str(binary)
            padded_binary_str = binary_str.zfill(5)
            pad_venue.append(padded_binary_str)
            
        # Accessing and unpacking the subject name and subject binary index
        
        temp, temp2, temp3 = ui.add_subject()
        subject_name = temp2
        #random.shuffle(subject_name)
        binary = temp3
        # Final subjects and venues list
        subjects = []
        venues = []
        
        # To help search the genomes 14 bits at a time
        pack_size = 0
        for i in range (len(a)//14):
            segment = a[pack_size : pack_size + 14]
            pack_size =  pack_size + 14
            
            # Reading the subjects
            # Convert the segment to an integer
            segment_num = int(segment[5:])
            
            # Check if segment_num is equal to any item in binary and print the item and its index
            for index, item in enumerate(binary):
                if segment_num == int(item):
                    #print(f"Found: {item}, Index: {index}")
                    #index = binary.index(segment[5:])
                    subjects.append(subject_name[index])
            
            # Reading the venues
            if segment[:5] in pad_venue:
                index2 = pad_venue.index(segment[:5])
                venues.append(venue_list[index2])
        
        subjects2 = []
        venues2 = []
        
        # To help search the genomes 14 bits at a time
        pack_size2 = 0
        for i in range (len(b)//14):
            segment2 = b[pack_size2 : pack_size2 + 14]
            pack_size2 =  pack_size2 + 14
            
            segment_num2 = int(segment2[5:])
            for index_, item in enumerate(binary):
                if segment_num2 == int(item):
                    subjects2.append(subject_name[index_])
            
            # Reading the venues
            if segment2[:5] in pad_venue:
                index_2 = pad_venue.index(segment2[:5])
                venues2.append(venue_list[index_2])
    
        return subject_name, venues, subject_name, venues2
        
    
    # Would run inside the runtime
    def read_runtime(self, genome1, genome2):
        # a is genome and b is genome 2
        # a , b = ui.chromosome()
        
        # Venues movement
        venue_list = Venue.count_venues
        # Venues binary list
        venue_binary=[]
        for venue in venue_list:
            venue_index = venue_list.index(venue)
            venue_index = "{0:b}".format(venue_index)
            venue_binary.append(venue_index)
        # Pad binary numbers
        pad_venue = []
        for binary in venue_binary:
            binary_str = str(binary)
            padded_binary_str = binary_str.zfill(5)
            pad_venue.append(padded_binary_str)
            
        # Accessing and unpacking the subject name and subject binary index
        import random
        temp, temp2, temp3 = ui.add_subject()
        subject_name = temp2
        binary = temp3
        #random.shuffle(subject_name)
        # Final subjects and venues list
        
        subjects = []
        venues = []
        
        # To help search the genomes 14 bits at a time
        pack_size = 0
        for i in range (int(len(genome1) // 14)):
            segment = genome1[pack_size : pack_size + 14]
            pack_size =  pack_size + 14
            
            # Reading the subjects
            segment_num = int(segment[5:])
            
            # Check if segment_num is equal to any item in binary and print the item and its index
            for index, item in enumerate(binary):
                if segment_num == int(item):
                    #print(f"Found: {item}, Index: {index}")
                    #index = binary.index(segment[5:])
                    subjects.append(subject_name[index])
                
            # Reading the venues
            if segment[:5] in pad_venue:
                index2 = pad_venue.index(segment[:5])
                venues.append(venue_list[index2])
                 
        subjects2 = []
        venues2 = []
        
        # To help search the genomes 14 bits at a time
        pack_size2 = 0
        for i in range (int(len(genome1) // 14)):
            segment2 = genome2[pack_size2 : pack_size2 + 14]
            pack_size2 =  pack_size2 + 14
            
            # Reading the subjects
            segment_num2 = int(segment2[5:])
            for index_, item in enumerate(binary):
                if segment_num2 == int(item):
                    subjects2.append(subject_name[index_])
            
            # Reading the venues
            if segment2[:5] in pad_venue:
                index_2 = pad_venue.index(segment2[:5])
                venues2.append(venue_list[index_2])
        
        
        return subject_name, venues, subject_name, venues2
        
    # Returns the fitness score of each result
    def fitness(self):
        a, b, c, d = ui.read()
            
        # List of instances
        instances = [elf, tetfund, necb1, necb2, necb3, gd1, gd2, gd3, gd4, neb1, neb2, neb3, neb4, neb5, neb6, fl3, fl4, ptdfhall, ptdf1, ptdf2]
        
        # Anomalies in genome based on venue capacity
        default = 0
        
        # Name to find
        capacity_list = []
        for i in b: # Venue from the genome1
            name_to_find = i
            
            # Find the instance with the matching name
            found_instance = None
            for instance in instances:
                if instance.name == name_to_find:
                    found_instance = instance
                    break

            # Check if the instance with the given name was found
            if found_instance is not None:
                # Access the 'cap' associated with 'Ken'
                capacity = int(found_instance.capacity)
            capacity_list.append(capacity)
            
        capacity_list2 = []        
        for subject in a: # Subject from genome1
            for key, val in self.my_dict1.items():
                if val == subject:
                    index = key
            capacity_subject = str(self.my_dict2[index])
            capacity_list2.append(capacity_subject)
        
        for i in range (min(len(capacity_list2), len(capacity_list))):
           # if capacity_list[i].isdigit() and capacity_list2[i].isdigit():
                if int(capacity_list[i]) < int(capacity_list2[i]):  
           # print("Capacity of list 1 is less than capacity of list 2 for index", i)
           # if capacity_list[i] < capacity_list2[i]:
                    default += 1
        
        return default
        
    
    # Would run inside the runtime
    def fitness_runtime(self, a, b, c, d):
    
        # List of instances
        instances = {'ELF':elf, 'TETfund': tetfund, 'NECB 1': necb1, 'NECB 2': necb2, 'NECB 3': necb3, 'GD 1': gd1, 'GD 2': gd2, 'GD 3': gd3, 'GD 4': gd4, 'New Engineering Block 1': neb1, 'New Engineering Block 2': neb2, 'New Engineering Block 3': neb3, 'New Engineering Block 4': neb4, 'New Engineering Block 5': neb5, 'New Engineering Block 6':neb6, 'FL 3': fl3, 'FL 4': fl4, 'PTDFhall': ptdfhall, 'PTDF 1': ptdf1, 'PTDF 2': ptdf2}
        
        # Anomalies in genome based on venue capacity
        default = 0
        
        # Name to find
        capacity_list = []
        for i in b: # Venue from the genome2
            if i in instances:
                capacity = instances[i]  # Access the value associated with the key 'i'
                capacity_list.append(capacity)
            # Find the instance with the matching name
            #found_instance = str
            #for instance in instances:
             #   if instance.name == name_to_find:
              #      found_instance = instance
                    #break

            # Check if the instance with the given name was found
            #if found_instance is not None:
                # Access the 'cap' associated with 'Ken'
               # capacity = int(found_instance.capacity)
                #capacity_list.append(capacity)
            
        capacity_list2 = []        
        for subject in a: # Subject from genome1
            for key, val in self.my_dict1.items():
                if val == subject:
                    index = key
                else:
                    break
                    capacity_subject = str(self.my_dict2[index])
                    capacity_list2.append(capacity_subject)
        
        for i in range (min(len(capacity_list2), len(capacity_list))):
           # if capacity_list[i].isdigit() and capacity_list2[i].isdigit():
                if int(capacity_list[i]) < int(capacity_list2[i]):  
           # print("Capacity of list 1 is less than capacity of list 2 for index", i)
           # if capacity_list[i] < capacity_list2[i]:
                    default += 1
        
        return default
    
    
    # For second fitness score
    def fitness2(self):
        a, b, c, d = ui.read()
            
        # List of instances
        instances = [elf, tetfund, necb1, necb2, necb3, gd1, gd2, gd3, gd4, neb1, neb2, neb3, neb4, neb5, neb6, fl3, fl4, ptdfhall, ptdf1, ptdf2]
        
        default = 0
        
        # Name to find
        capacity_list = []
        for i in d: # Venue from the genome1
            name_to_find = i
            
            # Find the instance with the matching name
            found_instance = None
            for instance in instances:
                if instance.name == name_to_find:
                    found_instance = instance
                    break

            # Check if the instance with the given name was found
            if found_instance is not None:
                # Access the 'cap' associated with 'Ken'
                capacity = int(found_instance.capacity)
            capacity_list.append(capacity)
            
        capacity_list2 = []        
        for subject in c: # Subject from genome1
            for key, val in self.my_dict1.items():
                if val == subject:
                    index = key
            capacity_subject = (self.my_dict2[index])
            capacity_list2.append(capacity_subject)
        
        for i in range (min(len(capacity_list2), len(capacity_list))):
#            if capacity_list[i].isdigit() and capacity_list2[i].isdigit():
                if int(capacity_list[i]) < int(capacity_list2[i]): 
            #if int(capacity_list[i]) < int(capacity_list2[i]):
                    default += 1
        
        return default
        
    
    # Would run inside the runtime
    def fitness2_runtime(self, a, b, c, d):

            
        # List of instances
        instances = {'ELF':elf, 'TETfund': tetfund, 'NECB 1': necb1, 'NECB 2': necb2, 'NECB 3': necb3, 'GD 1': gd1, 'GD 2': gd2, 'GD 3': gd3, 'GD 4': gd4, 'New Engineering Block 1': neb1, 'New Engineering Block 2': neb2, 'New Engineering Block 3': neb3, 'New Engineering Block 4': neb4, 'New Engineering Block 5': neb5, 'New Engineering Block 6':neb6, 'FL 3': fl3, 'FL 4': fl4, 'PTDFhall': ptdfhall, 'PTDF 1': ptdf1, 'PTDF 2': ptdf2}
        
        default = 0
        
        # Name to find
        capacity_list = []
        for i in d: # Venue from the genome2
            if i in instances:
                capacity = instances[i]  # Access the value associated with the key 'i'
                capacity_list.append(capacity.capacity)
            # Find the instance with the matching name
            #found_instance = str
            #for instance in instances:
             #   if instance.name == name_to_find:
              #      found_instance = instance
                    #break

            # Check if the instance with the given name was found
            #if found_instance is not None:
                # Access the 'cap' associated with 'Ken'
               # capacity = int(found_instance.capacity)
                #capacity_list.append(capacity)
            
            
        capacity_list2 = []        
        for subject in c: # Subject from genome1
            for key, val in self.my_dict1.items():
                if val == subject:
                    index = key
                else:
                    break
                capacity_subject = (self.my_dict2[index])
                capacity_list2.append(capacity_subject)
        
        for i in range (min(len(capacity_list2), len(capacity_list))):
#            if capacity_list[i].isdigit() and capacity_list2[i].isdigit():
                if int(capacity_list[i]) < int(capacity_list2[i]): 
            #if int(capacity_list[i]) < int(capacity_list2[i]):
                    default += 1
        
        return default
    
    # Fitness score to check the credit hour complaince in genome1
    def fitness_hour(self):
        a, b, c, d = ui.read()
        default = 0
        
        credit_hour_list = []        
        for subject in a: # Subject from genome1
            for key, val in self.my_dict1.items():
                if val == subject:
                    index = key
            credit_hour = str(self.my_dict3[index])
            #credit_hour_list.append(capacity_subject)
            n = 0
            if subject in a:
                n += 1
                #n = str
            if int(credit_hour) <= int(2) and int(n) > int(1):
                default += 1
            if credit_hour in range(3,5) and n not in range(2,5):
                default += 1 
        return default
    
    
    # Would run inside the runtime
    def fitness_hour_runtime(self, a, b, c, d):
        
        

        default = 0
        
        credit_hour_list = []        
        for subject in a: # Subject from genome1
            for key, val in self.my_dict1.items():
                if val == subject:
                    index = key
            credit_hour = str(self.my_dict3[index])
            #credit_hour_list.append(capacity_subject)
            n = 0
            if subject in a:
                n += 1
                #n = str
            if int(credit_hour) <= int(2) and int(n) > int(1):
                default += 1
            if credit_hour in range(3,5) and n not in range(2,5):
                default += 1 
        return default
    
    # Fitness score to check the credit hour complaince in genome2
    def fitness_hour2(self):
        a, b, c, d = ui.read()
        default = 0
        
        credit_hour_list = []        
        for subject in c: # Subject from genome1
            for key, val in self.my_dict1.items():
                if val == subject:
                    index = key
            credit_hour = str(self.my_dict3[index])
            #credit_hour_list.append(capacity_subject)
            n = 0
            if subject in a:
                n += 1
            if int(credit_hour) <= int(2) and int(n) > int(1):
                default += 1
            if credit_hour in range(3,5) and n not in range(2,5):
                default += 1
        return default        
        
    
    # Would run inside the runtime
    def fitness_hour2_runtime(self, a, b, c, d):
        
        default = 0
        credit_hour_list = [] 
        
        for subject in c: # Subject from genome1
            for key, val in self.my_dict1.items():
                if val == subject:
                    index = key
            credit_hour = str(self.my_dict3[index])
            #credit_hour_list.append(capacity_subject)
            n = 0
            if subject in a:
                n += 1
            if int(credit_hour) <= int(2) and int(n) > int(1):
                default += 1
            if credit_hour in range(3,5) and n not in range(2,5):
                default += 1
        return default   
    
    
    
    # This would show thw entire flow of the task         
    def runtime(self):
            import random
            ui.chromosome()
            ui.read()
            default1 = ui.fitness()
            default2 = ui.fitness2()
            default3 = ui.fitness_hour()
            default4 = ui.fitness_hour2()
            genome1_fitness = default1 + default3
            genome2_fitness = default2 + default4

            # Add your selection logic here
            # For example, you can choose the child with higher fitness for the next iteration
            if genome1_fitness < genome2_fitness:
                child1 = ui.chromosome()[0]
                child2 = ui.chromosome()[1]
            else:
                child1 = ui.chromosome()[1]
                child2 = ui.chromosome()[0]

            
            # Modify your mutation and crossover methods to accept the selected child
            # and update the genome accordingly
            #for generation in range(3):
                # Mutation and crossover on the selected child
            for i in range (50):
                gene1, gene2 = ui.mutation(child1, child2)
                genome1, genome2 = ui.multipoint_crossover(gene1, gene2)
                a, b, c, d =  ui.read_runtime(genome1, genome2)
                default1 = ui.fitness_runtime(a, b, c, d)
                default2 = ui.fitness2_runtime(a, b, c, d)
                default3 = ui.fitness_hour_runtime(a, b, c, d)
                default4 = ui.fitness_hour2_runtime(a, b, c, d)
                genome1_fitness = int(default1) + int(default3)
                genome2_fitness = int(default2) + int(default4)
                
                if genome1_fitness > genome2_fitness:
                    child1 = ui.multipoint_crossover(gene1, gene2)[0]
                    child2 = ui.multipoint_crossover(gene1, gene2)[1]
                else:
                    child1 = ui.multipoint_crossover(gene1, gene2)[1]
                    child2 = ui.multipoint_crossover(gene1, gene2)[0]
            
            a,b,c,d = ui.read_runtime(child1, child2)
            print(a)
            #subj = solution[2]
            e,f,g,h,i = ui.subject_classifier()
            level100 = a[0: e]
            random.shuffle(level100)
            level200 = a[e: f]
            random.shuffle(level200)
            level300 = a[f: g]
            random.shuffle(level300)
            level400 = a[g: h]
            random.shuffle(level400)
            level500 = a[h: i]
            random.shuffle(level500)
            
            # Perod slots
            #a = solution[1]
            #b = solution[3]
            time = ['Year 1', '8-10AM', '10-12PM', '12-2PM', '2-4PM', '4-6PM']
            space = [] 
            star = ['********', '********', '********', '********', '********', '********']
            my_list = [['Year 1', '8-10AM', '10-12PM', '12-2PM', '2-4PM', '4-6PM'],
                       star,
                       ["MON"] + level100[:5], 
                       [''] + d[:5],
                       space,
                       ["TUE"] + level100[5:10], 
                       [''] + d[5:10],
                       space,
                       ["WED"] + level100[10:15],
                       [''] + d[10:15],
                       space,
                       ["THUR"] + level100[15:20],
                       [''] + d[15:20],
                       space,
                       ["FRI"] + level100[20:25],
                       [''] + random.sample(d, 5),
                       space,
                       space,
                       space,
                       space,
                       
                       ['Year 2', '8-10AM', '10-12PM', '12-2PM', '2-4PM', '4-6PM'],
                       star,
                       ["MON"] + level200[:5], 
                       [''] + b[:5],
                       space,
                       ["TUE"] + level200[5:10], 
                       [''] + b[5:10],
                       space,
                       ["WED"] + level200[10:15],
                       [''] + b[10:15],
                       space,
                       ["THUR"] + level200[15:20],
                       [''] + b[15:20],
                       space,
                       ["FRI"] + level200[20:25],
                       [''] + b[20: 25],
                       space,                       
                       space,
                       space,
                       space,
                       
                       ['Year 3', '8-10AM', '10-12PM', '12-2PM', '2-4PM', '4-6PM'],
                       star,
                       ["MON"] + level300[:5], 
                       [''] + d[25:30],
                       space,
                       ["TUE"] + level300[5:10], 
                       [''] + d[30:35],
                       space,
                       ["WED"] + level300[10:15],
                       [''] + d[35:40],
                       space,
                       ["THUR"] + level300[15:20],
                       [''] + d[40:45],
                       space,
                       ["FRI"] + level300[20:25],
                       [''] + random.sample(b, 5),
                       space,
                       space,
                       space,
                       space,
                       
                       ['Year 4', '8-10AM', '10-12PM', '12-2PM', '2-4PM', '4-6PM'],
                       star,
                       ["MON"] + level400[:5], 
                       [''] + b[25:30],
                       space,
                       ["TUE"] + level400[5:10], 
                       [''] + b[30:35],
                       space,
                       ["WED"] + level400[10:15],
                       [''] + b[35:40],
                       space,
                       ["THUR"] + level400[15:20],
                       [''] + b[40:45],
                       space,
                       ["FRI"] + level400[20:25],
                       [''] + random.sample(b, 5),
                       space,
                       space,
                       space,
                       space,
                       

                       ['Year 5', '8-10AM', '10-12PM', '12-2PM', '2-4PM', '4-6PM'],
                       star,
                       ["MON"] + level500[:5], 
                       [''] + d[45:50],
                       space,
                       ["TUE"] + level500[5:10], 
                       [''] + random.sample(b, 5),
                       space,
                       ["WED"] + level500[10:15],
                       [''] + random.sample(b, 5),
                       space,
                       ["THUR"] + level500[15:20],
                       [''] + random.sample(b, 5),
                       space,
                       ["FRI"] + level500[20:25],
                       [''] + random.sample(b, 5),
                       ]
            file_path = "timetable_genetic.csv"
            with open(file_path, "w", newline="") as csvfile:
                csv_writer = csv.writer(csvfile)
                csv_writer.writerows(my_list)
         
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())


